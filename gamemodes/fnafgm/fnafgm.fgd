//-------------------------------------------------------------------------
//
// FNAFGM FGD V6.6 BY XPERIDIA
//
//-------------------------------------------------------------------------

@include "base.fgd"

@PointClass base(Parentname, Angles) studioprop("models/editor/camera.mdl") = fnafgm_camera : "FNAFGM Camera"
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
]

@PointClass base(Targetname) iconsprite("editor/logic_relay.vmt") = fnafgm_link : "FNAFGM Link"
[
	input FoxyKnockDoor(void) : "Foxy knocked the door."
	input StartNight(void) : "Start Night event."
	input DoorClosing(integer) : "X door is closing."
	input DoorOpen(integer) : "X door is open."
	input LightOn(integer) : "X light is on."
	input LightOff(integer) : "X light is off."
	input Jumpscared(string) : "Who trigger a jumpscare?"
	input ChangeLastCam(integer) : "Change the last camera."
	output OnNightEnd(void) : "Fired when night ended."
	output OnPowerDown(void) : "Fired when power is depleted."
]

@PointClass base(Targetname) iconsprite("editor/logic_case.vmt") = fnafgm_logic_case_prob :	"FNAFGM Logic Case Prob"
[
	Case01(string) : "Case 01"
	Case02(string) : "Case 02"
	Case03(string) : "Case 03"
	Case04(string) : "Case 04"
	Case05(string) : "Case 05"
	Case06(string) : "Case 06"
	Case07(string) : "Case 07"
	Case08(string) : "Case 08"
	Case09(string) : "Case 09"
	Case10(string) : "Case 10"
	Case11(string) : "Case 11"
	Case12(string) : "Case 12"
	Case13(string) : "Case 13"
	Case14(string) : "Case 14"
	Case15(string) : "Case 15"
	Case16(string) : "Case 16"
	ProbCase01(float) : "Proba Case 01"
	ProbCase02(float) : "Proba Case 02"
	ProbCase03(float) : "Proba Case 03"
	ProbCase04(float) : "Proba Case 04"
	ProbCase05(float) : "Proba Case 05"
	ProbCase06(float) : "Proba Case 06"
	ProbCase07(float) : "Proba Case 07"
	ProbCase08(float) : "Proba Case 08"
	ProbCase09(float) : "Proba Case 09"
	ProbCase10(float) : "Proba Case 10"
	ProbCase11(float) : "Proba Case 11"
	ProbCase12(float) : "Proba Case 12"
	ProbCase13(float) : "Proba Case 13"
	ProbCase14(float) : "Proba Case 14"
	ProbCase15(float) : "Proba Case 15"
	ProbCase16(float) : "Proba Case 16"


	// Inputs
	input PickRandom(void) : "Fires a random OnCase output with at least one connection."
	input Move(string) : "Move an entity to another entity."

	// Outputs
	output OnCase01(void) : "Fired when the input value equals the Case01 value."
	output OnCase02(void) : "Fired when the input value equals the Case02 value."
	output OnCase03(void) : "Fired when the input value equals the Case03 value."
	output OnCase04(void) : "Fired when the input value equals the Case04 value."
	output OnCase05(void) : "Fired when the input value equals the Case05 value."
	output OnCase06(void) : "Fired when the input value equals the Case06 value."
	output OnCase07(void) : "Fired when the input value equals the Case07 value."
	output OnCase08(void) : "Fired when the input value equals the Case08 value."
	output OnCase09(void) : "Fired when the input value equals the Case09 value."
	output OnCase10(void) : "Fired when the input value equals the Case10 value."
	output OnCase11(void) : "Fired when the input value equals the Case11 value."
	output OnCase12(void) : "Fired when the input value equals the Case12 value."
	output OnCase13(void) : "Fired when the input value equals the Case13 value."
	output OnCase14(void) : "Fired when the input value equals the Case14 value."
	output OnCase15(void) : "Fired when the input value equals the Case15 value."
	output OnCase16(void) : "Fired when the input value equals the Case16 value."
]

@PointClass base(Targetname, Angles) studio() = fnafgm_animatronic : "FNAFGM Animatronic"
[
	model(studio) : "Model"
	AType(String) : "Animatronic type"
	APos(String) : "Animatronic initial pos"
]

@PointClass base(PlayerClass, Angles) studio("models/editor/playerstart.mdl") = fnafgm_teamanimatronics_start : "Spawn point for the animatronic team"
[
]

@PointClass base(Targetname, Angles, EnableDisable) studio("models/props_lab/keypad.mdl") = fnafgm_keypad : "FNAFGM KeyPad"
[
	Password(string) : "Numerical password (8 digits max)"
	StartErrored(choices) : "Start Errored" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input EnableError(void) : "Make the keypad always error."
	input DisableError(void) : "Make the keypad normal."
	// Outputs
	output OnPressed(void) : "Fired when the button is pressed."
	output OnCorrectPassword(void) : "Fired when the correct code has been input."
	output OnBadPassword(void) : "Fired when a wrong code has been input."
]
